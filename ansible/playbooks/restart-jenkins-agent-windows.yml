---
# Jenkins Agent Restart Playbook - Windows
- name: Restart Jenkins Agent on Windows
  hosts: "{{ target_host | default('windows_jenkins_agents') }}"
  gather_facts: yes
  
  vars:
    jenkins_service_name: "{{ jenkins_service | default('Jenkins Agent') }}"
    force_restart: "{{ force | default(false) }}"
    wait_for_restart: "{{ wait_timeout | default(30) }}"
    health_check_enabled: "{{ enable_health_check | default(true) }}"
    backup_logs: "{{ backup_logs_enabled | default(true) }}"
    
  pre_tasks:
    - name: Gather Windows system information
      setup:
        gather_subset:
          - hardware
          - network
          
    - name: Check if Jenkins agent service exists
      win_service:
        name: "{{ jenkins_service_name }}"
      register: service_check
      failed_when: false
      
    - name: Create backup directory
      when: backup_logs
      win_file:
        path: "C:\\Jenkins\\logs\\backups"
        state: directory
        
    - name: Backup current logs
      when: backup_logs
      win_copy:
        src: "C:\\Jenkins\\logs\\jenkins-agent.log"
        dest: "C:\\Jenkins\\logs\\backups\\jenkins-agent-{{ ansible_date_time.epoch }}.log"
        remote_src: yes
      ignore_errors: yes

  tasks:
    - name: Check current Jenkins agent service status
      win_service:
        name: "{{ jenkins_service_name }}"
      register: current_status
      
    - name: Log current agent status
      debug:
        msg: |
          Current Jenkins Agent Status:
          - Service: {{ jenkins_service_name }}
          - State: {{ current_status.state | default('unknown') }}
          - Status: {{ current_status.status | default('unknown') }}
          - PID: {{ current_status.pid | default('none') }}
          
    - name: Stop Jenkins agent service gracefully
      when: force_restart or current_status.state == "stopped" or current_status.status == "failed"
      win_service:
        name: "{{ jenkins_service_name }}"
        state: stopped
        
    - name: Wait for graceful shutdown
      when: force_restart or current_status.state == "stopped"
      win_wait_for:
        timeout: 10
        
    - name: Kill remaining Jenkins processes (force restart only)
      when: force_restart
      win_shell: |
        Get-Process -Name "*jenkins*" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 2
      ignore_errors: yes
      
    - name: Start Jenkins agent service
      win_service:
        name: "{{ jenkins_service_name }}"
        state: started
        start_mode: auto
        
    - name: Wait for service to be running
      win_service:
        name: "{{ jenkins_service_name }}"
      register: restart_result
      until: restart_result.state == "running"
      retries: "{{ wait_for_restart }}"
      delay: 1
      
    - name: Verify Jenkins agent health
      when: health_check_enabled
      block:
        - name: Check final service status
          win_service:
            name: "{{ jenkins_service_name }}"
          register: final_status
          
        - name: Check Jenkins agent log for errors
          win_shell: |
            Get-Content "C:\\Jenkins\\logs\\jenkins-agent.log" -Tail 50 | Select-String -Pattern "error" -AllMatches
          register: log_check
          ignore_errors: yes
          
        - name: Test network connectivity to Jenkins master
          win_uri:
            url: "{{ jenkins_master_url | default('http://localhost:8080') }}/computer/api/json"
            method: GET
            timeout: 10
          register: connectivity_test
          ignore_errors: yes
          
        - name: Check Windows Event Log for service errors
          win_shell: |
            Get-WinEvent -FilterHashtable @{LogName='System'; ID=7034,7031,7030; StartTime=(Get-Date).AddMinutes(-5)} -MaxEvents 10 -ErrorAction SilentlyContinue | 
            Where-Object {$_.Message -like "*Jenkins*"} | 
            Select-Object TimeCreated, Id, LevelDisplayName, Message
          register: event_log_check
          ignore_errors: yes

  post_tasks:
    - name: Generate restart report
      set_fact:
        restart_report:
          timestamp: "{{ ansible_date_time.iso8601 }}"
          host: "{{ inventory_hostname }}"
          service: "{{ jenkins_service_name }}"
          restart_method: "{{ 'force' if force_restart else 'graceful' }}"
          final_status: "{{ final_status.state | default('unknown') }}"
          final_status_code: "{{ final_status.status | default('unknown') }}"
          pid: "{{ final_status.pid | default('none') }}"
          errors_found: "{{ 'yes' if log_check.stdout else 'no' }}"
          connectivity: "{{ 'ok' if connectivity_test.status_code == 200 else 'failed' }}"
          event_log_errors: "{{ 'yes' if event_log_check.stdout else 'no' }}"
          
    - name: Display restart summary
      debug:
        var: restart_report
        
    - name: Save restart report to file
      win_copy:
        content: "{{ restart_report | to_nice_json }}"
        dest: "C:\\Jenkins\\logs\\restart-{{ ansible_date_time.epoch }}.json"

  handlers:
    - name: restart jenkins-agent
      win_service:
        name: "{{ jenkins_service_name }}"
        state: restarted
