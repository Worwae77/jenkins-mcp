---
# Jenkins Agent Restart Playbook - Linux
- name: Restart Jenkins Agent on Linux
  hosts: "{{ target_host | default('jenkins_agents') }}"
  become: yes
  gather_facts: yes
  
  vars:
    jenkins_service_name: "{{ jenkins_service | default('jenkins-agent') }}"
    force_restart: "{{ force | default(false) }}"
    wait_for_restart: "{{ wait_timeout | default(30) }}"
    health_check_enabled: "{{ enable_health_check | default(true) }}"
    backup_logs: "{{ backup_logs_enabled | default(true) }}"
    
  pre_tasks:
    - name: Gather system information
      setup:
        gather_subset:
          - hardware
          - network
          - services
          
    - name: Check if Jenkins agent service exists
      systemd:
        name: "{{ jenkins_service_name }}"
      register: service_check
      failed_when: false
      
    - name: Backup current logs before restart
      when: backup_logs
      block:
        - name: Create backup directory
          file:
            path: "/var/log/jenkins-agent/backups"
            state: directory
            mode: '0755'
            
        - name: Backup current logs
          copy:
            src: "/var/log/jenkins-agent/jenkins-agent.log"
            dest: "/var/log/jenkins-agent/backups/jenkins-agent-{{ ansible_date_time.epoch }}.log"
            remote_src: yes
          ignore_errors: yes

  tasks:
    - name: Check current Jenkins agent status
      systemd:
        name: "{{ jenkins_service_name }}"
      register: current_status
      
    - name: Log current agent status
      debug:
        msg: |
          Current Jenkins Agent Status:
          - Service: {{ jenkins_service_name }}
          - State: {{ current_status.status.ActiveState | default('unknown') }}
          - SubState: {{ current_status.status.SubState | default('unknown') }}
          - PID: {{ current_status.status.MainPID | default('none') }}
          
    - name: Stop Jenkins agent gracefully (if force restart)
      when: force_restart or current_status.status.ActiveState == "failed"
      systemd:
        name: "{{ jenkins_service_name }}"
        state: stopped
        
    - name: Wait for graceful shutdown
      when: force_restart or current_status.status.ActiveState == "failed"
      wait_for:
        timeout: 10
        
    - name: Kill remaining Jenkins processes (force restart only)
      when: force_restart
      shell: |
        pkill -f jenkins || true
        sleep 2
        pkill -9 -f jenkins || true
      ignore_errors: yes
      
    - name: Start Jenkins agent service
      systemd:
        name: "{{ jenkins_service_name }}"
        state: started
        enabled: yes
        daemon_reload: yes
        
    - name: Wait for service to be active
      systemd:
        name: "{{ jenkins_service_name }}"
      register: restart_result
      until: restart_result.status.ActiveState == "active"
      retries: "{{ wait_for_restart }}"
      delay: 1
      
    - name: Verify Jenkins agent health
      when: health_check_enabled
      block:
        - name: Check service status
          systemd:
            name: "{{ jenkins_service_name }}"
          register: final_status
          
        - name: Check Jenkins agent log for errors
          shell: |
            tail -50 /var/log/jenkins-agent/jenkins-agent.log | grep -i error || echo "No errors found"
          register: log_check
          ignore_errors: yes
          
        - name: Test network connectivity to Jenkins master
          uri:
            url: "{{ jenkins_master_url | default('http://localhost:8080') }}/computer/api/json"
            method: GET
            timeout: 10
          register: connectivity_test
          ignore_errors: yes
          
  post_tasks:
    - name: Generate restart report
      set_fact:
        restart_report:
          timestamp: "{{ ansible_date_time.iso8601 }}"
          host: "{{ inventory_hostname }}"
          service: "{{ jenkins_service_name }}"
          restart_method: "{{ 'force' if force_restart else 'graceful' }}"
          final_status: "{{ final_status.status.ActiveState | default('unknown') }}"
          pid: "{{ final_status.status.MainPID | default('none') }}"
          errors_found: "{{ 'yes' if 'error' in log_check.stdout.lower() else 'no' }}"
          connectivity: "{{ 'ok' if connectivity_test.status == 200 else 'failed' }}"
          
    - name: Display restart summary
      debug:
        var: restart_report
        
    - name: Save restart report to file
      copy:
        content: "{{ restart_report | to_nice_json }}"
        dest: "/var/log/jenkins-agent/restart-{{ ansible_date_time.epoch }}.json"
        mode: '0644'

  handlers:
    - name: restart jenkins-agent
      systemd:
        name: "{{ jenkins_service_name }}"
        state: restarted
        daemon_reload: yes
