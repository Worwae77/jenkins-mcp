# Dockerfile.macos - Build for macOS/ARM64 in Docker
FROM denoland/deno:alpine as builder

# Set environment variables to bypass SSL verification during build
ENV DENO_TLS_CA_STORE=system
ENV NODE_TLS_REJECT_UNAUTHORIZED=0

# Create app directory
WORKDIR /app

# Copy source files
COPY src/ ./src/
COPY deno.json ./

# Download dependencies and compile for macOS ARM64
RUN deno cache --unsafely-ignore-certificate-errors src/simple-server.ts && \
    deno compile \
    --allow-net \
    --allow-env \
    --allow-read \
    --allow-write \
    --unsafely-ignore-certificate-errors \
    --target aarch64-apple-darwin \
    --output jenkins-mcp-server \
    src/simple-server.ts

# Runtime stage - Use macOS compatible base
FROM alpine:latest

# Install CA certificates and basic tools
RUN apk add --no-cache ca-certificates

# Copy the compiled binary from builder stage
COPY --from=builder /app/jenkins-mcp-server /usr/local/bin/jenkins-mcp-server

# Make executable
RUN chmod +x /usr/local/bin/jenkins-mcp-server

# Create non-root user
RUN addgroup -g 1000 jenkins && adduser -D -u 1000 -G jenkins jenkins
RUN chown jenkins:jenkins /usr/local/bin/jenkins-mcp-server

# Switch to non-root user
USER jenkins

# Expose port
EXPOSE 8080

# Set environment variables for SSL bypass
ENV JENKINS_SSL_VERIFY=false
ENV JENKINS_SSL_ALLOW_SELF_SIGNED=true
ENV JENKINS_SSL_DEBUG=true

# Start the server
CMD ["/usr/local/bin/jenkins-mcp-server"]
