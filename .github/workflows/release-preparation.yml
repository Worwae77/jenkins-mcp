name: üöÄ Release Preparation v2.1.1
on:
  workflow_dispatch:
    inputs:
      create_issues:
        description: 'Create GitHub Issues'
        required: true
        default: 'true'
        type: boolean
      create_pr:
        description: 'Create Pull Request'
        required: true
        default: 'true'
        type: boolean

jobs:
  release_preparation:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: write
    
    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üîç Create Issue #1 - Corporate SSL Support
        if: ${{ inputs.create_issues }}
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Add corporate SSL certificate bypass for enterprise environments',
              labels: ['enhancement', 'bug', 'corporate', 'ssl'],
              body: `## Problem
            Jenkins MCP Server fails to connect in corporate environments due to SSL certificate validation issues. This affects both runtime connections to Jenkins and build-time Deno compilation.

            ## Solution Implemented ‚úÖ
            - Added \`--unsafely-ignore-certificate-errors\` flag to all Deno operations
            - Enhanced SSL configuration with bypass options  
            - Updated environment variables for SSL control
            - Corporate network compatibility improvements

            ## Changes
            - Updated \`deno.json\` with SSL bypass flags for all tasks
            - Enhanced \`src/utils/ssl.ts\` with corporate SSL handling
            - Updated \`src/jenkins/auth.ts\` with SSL bypass options
            - Added environment variables: \`JENKINS_SSL_VERIFY\`, \`JENKINS_SSL_ALLOW_SELF_SIGNED\`, \`JENKINS_SSL_DEBUG\`

            ## Testing
            - [x] Corporate Jenkins connection with SSL bypass
            - [x] All 13 MCP tools functional
            - [x] Cross-platform SSL compatibility

            ## Files Changed
            - \`deno.json\` - SSL bypass configuration
            - \`src/utils/ssl.ts\` - Corporate SSL handling
            - \`src/jenkins/auth.ts\` - SSL bypass options
            - \`.env.example\` - Environment documentation

            **Ready for merge in v2.1.1** üéØ`
            });
            console.log(`Created issue #${issue.number}: ${issue.title}`);

      - name: üê≥ Create Issue #2 - Multi-Architecture Docker
        if: ${{ inputs.create_issues }}
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Implement multi-architecture Docker builds (AMD64/ARM64)',
              labels: ['enhancement', 'docker', 'deployment', 'multiarch'],
              body: `## Problem
            Jenkins MCP Server Docker images only supported single architecture, limiting deployment options across different platforms and cloud environments.

            ## Solution Implemented ‚úÖ
            - Multi-architecture Docker builds supporting AMD64 and ARM64
            - Corporate network-compatible build process
            - Automated publishing pipeline
            - Platform-specific compilation targets

            ## Changes
            - New \`Dockerfile.multiarch\` for multi-platform builds
            - Added \`build-multiarch.sh\` publishing automation
            - Updated \`docker-compose.yml\` with multi-arch support
            - Enhanced Makefile with multi-architecture targets
            - Updated VS Code MCP configuration for Docker

            ## Features
            - ‚úÖ Linux AMD64 support
            - ‚úÖ Linux ARM64 support  
            - ‚úÖ Corporate SSL bypass during builds
            - ‚úÖ Automated registry publishing
            - ‚úÖ Health checks and security hardening

            ## Files Changed
            - \`Dockerfile.multiarch\` (new) - Multi-platform Docker builds
            - \`build-multiarch.sh\` (new) - Publishing automation
            - \`docker-compose.yml\` - Multi-arch configuration
            - \`Makefile\` - Multi-architecture targets
            - \`.vscode/mcp.json\` - Docker integration

            **Ready for merge in v2.1.1** üéØ`
            });
            console.log(`Created issue #${issue.number}: ${issue.title}`);

      - name: üîß Create Issue #3 - Build System Enhancements
        if: ${{ inputs.create_issues }}
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Enhance build system with SSL bypass and cross-platform support',
              labels: ['enhancement', 'build', 'cross-platform'],
              body: `## Problem
            Build system lacked SSL bypass capabilities and comprehensive cross-platform support, causing failures in corporate environments.

            ## Solution Implemented ‚úÖ
            - Enhanced Deno configuration with SSL bypass
            - Cross-platform compilation improvements
            - Corporate network build compatibility
            - Automated multi-architecture builds

            ## Changes
            - Updated \`deno.json\` with \`--unsafely-ignore-certificate-errors\` for all tasks
            - Enhanced Makefile with multi-architecture Docker targets
            - Added cross-platform binary compilation
            - Improved build scripts with SSL handling

            ## Build Targets Added
            - \`make docker-multiarch-setup\`
            - \`make docker-multiarch-build\`
            - \`make docker-multiarch-test\`
            - \`make docker-multiarch-publish\`

            ## Files Changed
            - \`deno.json\` - SSL bypass configuration
            - \`Makefile\` - Multi-architecture targets
            - \`build-multiarch.sh\` - Automated builds

            **Ready for merge in v2.1.1** üéØ`
            });
            console.log(`Created issue #${issue.number}: ${issue.title}`);

      - name: üìö Create Issue #4 - Documentation Updates
        if: ${{ inputs.create_issues }}
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Update VS Code MCP configuration and deployment guides',
              labels: ['documentation', 'configuration', 'vscode'],
              body: `## Problem
            Documentation and configuration examples were outdated and didn't reflect new Docker multi-architecture and SSL bypass capabilities.

            ## Solution Implemented ‚úÖ
            - Updated VS Code MCP configuration with Docker support
            - Comprehensive multi-architecture deployment guide
            - Corporate environment setup documentation
            - SSL bypass configuration examples

            ## Changes
            - Updated \`.vscode/mcp.json\` with Docker configuration options
            - Added \`DOCKER_MULTIARCH_GUIDE.md\` comprehensive guide
            - Enhanced environment variable documentation
            - Added deployment option comparisons

            ## Documentation Added
            - Multi-architecture Docker deployment guide
            - Corporate SSL bypass setup instructions
            - VS Code MCP integration examples
            - Build and publishing workflows

            ## Files Changed
            - \`.vscode/mcp.json\` - Docker integration config
            - \`DOCKER_MULTIARCH_GUIDE.md\` (new) - Deployment guide
            - \`README.md\` (updates needed) - Main documentation

            **Ready for merge in v2.1.1** üéØ`
            });
            console.log(`Created issue #${issue.number}: ${issue.title}`);

      - name: üéØ Create Pull Request for v2.1.1
        if: ${{ inputs.create_pr }}
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üöÄ Release v2.1.1: Multi-Architecture Docker + Corporate SSL Support',
              head: 'main',
              base: 'release/v2.1.1',
              body: `# üöÄ Jenkins MCP Server v2.1.1

            ## üéØ Release Summary
            Major enhancement release focusing on **enterprise environment support** and **multi-platform deployment**.

            ## ‚ú® Key Features

            ### üê≥ Multi-Architecture Docker Support
            - **AMD64 & ARM64** builds for broad platform compatibility
            - Automated multi-platform publishing pipeline
            - Corporate network-compatible build process
            - Enhanced \`docker-compose.yml\` and VS Code integration

            ### üîê Corporate SSL Certificate Support  
            - **Enterprise-grade SSL bypass** for corporate environments
            - Comprehensive SSL configuration with environment variables
            - Build-time and runtime SSL compatibility
            - Debug capabilities for SSL troubleshooting

            ### üîß Build System Enhancements
            - Enhanced Deno configuration with SSL bypass flags
            - Cross-platform compilation improvements
            - Automated multi-architecture build targets
            - Improved development workflow

            ## üìä Changes Summary
            - **30 files changed**: 898 insertions, 3000 deletions
            - **Repository cleanup**: Removed obsolete documentation and files
            - **New infrastructure**: Multi-arch Docker, SSL bypass, automation scripts
            - **Enhanced configuration**: VS Code MCP, environment variables, build system

            ## üîó Related Issues
            - Closes: Corporate SSL certificate bypass (#TBD)
            - Closes: Multi-architecture Docker builds (#TBD) 
            - Closes: Build system enhancements (#TBD)
            - Closes: Documentation updates (#TBD)

            ## üß™ Testing
            - [x] Multi-architecture Docker builds (AMD64/ARM64)
            - [x] Corporate SSL bypass functionality
            - [x] All 13 MCP tools operational
            - [x] VS Code MCP integration
            - [x] Cross-platform compatibility

            ## üöÄ Deployment
            Ready for production deployment with:
            - Multi-platform Docker images
            - Corporate environment compatibility  
            - Enhanced VS Code MCP integration
            - Comprehensive documentation

            **This release significantly improves enterprise adoption and deployment flexibility.**`
            });
            console.log(`Created PR #${pr.number}: ${pr.title}`);

      - name: üìù Release Summary
        run: |
          echo "## üéä Release Preparation Complete!"
          echo ""
          echo "### ‚úÖ Repository Status"
          echo "- Multi-architecture Docker infrastructure: **Ready**"
          echo "- Corporate SSL bypass: **Implemented**"  
          echo "- Build system enhancements: **Complete**"
          echo "- Repository cleanup: **Done**"
          echo ""
          echo "### üéØ Next Steps"
          echo "1. Review created GitHub issues"
          echo "2. Merge Pull Request for v2.1.1"
          echo "3. Tag release and publish Docker images"
          echo "4. Update documentation and announcement"
          echo ""
          echo "**Jenkins MCP Server v2.1.1 ready for enterprise deployment! üöÄ**"
