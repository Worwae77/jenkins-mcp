name: Build and Release

# This workflow uses Makefile commands for consistency with local development.
# This makes it easy to fork and adapt to other CI/CD systems - just use the same make commands!
# Available commands: make help, make quality, make build-all, make docker-build, make release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Quality and validation using Makefile
  quality-check:
    name: Quality Assurance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: '2.4.5'

      - name: Install dependencies
        run: make install

      - name: Run comprehensive quality checks
        run: make quality

      - name: Show project information
        run: make info

  build-binaries:
    name: Build Cross-Platform Binaries
    runs-on: ${{ matrix.os }}
    needs: quality-check
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: jenkins-mcp-server-linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: jenkins-mcp-server-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: jenkins-mcp-server-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: jenkins-mcp-server-windows-x64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: '2.4.5'

      - name: Install dependencies
        run: make install

      - name: Run quality checks
        run: make quality

      - name: Build binary for target platform (with SSL handling)
        run: |
          # Try normal build first, fallback to SSL-bypass if needed
          case "${{ matrix.os }}" in
            "ubuntu-latest")
              if ! make build-linux; then
                echo "Normal build failed, trying with SSL bypass..."
                deno compile --allow-net --allow-env --allow-read --allow-write --unsafely-ignore-certificate-errors --target x86_64-unknown-linux-gnu --output jenkins-mcp-server-linux-x64 src/simple-server.ts
              fi
              # Only move if source and destination are different
              if [ "jenkins-mcp-server-linux-x64" != "${{ matrix.artifact }}" ]; then
                mv jenkins-mcp-server-linux-x64 ${{ matrix.artifact }}
              fi
              ;;
            "macos-latest")
              if [ "${{ matrix.target }}" = "aarch64-apple-darwin" ]; then
                if ! make build-macos-arm; then
                  echo "Normal build failed, trying with SSL bypass..."
                  deno compile --allow-net --allow-env --allow-read --allow-write --unsafely-ignore-certificate-errors --target aarch64-apple-darwin --output jenkins-mcp-server-macos-arm64 src/simple-server.ts
                fi
                if [ "jenkins-mcp-server-macos-arm64" != "${{ matrix.artifact }}" ]; then
                  mv jenkins-mcp-server-macos-arm64 ${{ matrix.artifact }}
                fi
              else
                if ! make build-macos; then
                  echo "Normal build failed, trying with SSL bypass..."
                  deno compile --allow-net --allow-env --allow-read --allow-write --unsafely-ignore-certificate-errors --target x86_64-apple-darwin --output jenkins-mcp-server-macos-x64 src/simple-server.ts
                fi
                if [ "jenkins-mcp-server-macos-x64" != "${{ matrix.artifact }}" ]; then
                  mv jenkins-mcp-server-macos-x64 ${{ matrix.artifact }}
                fi
              fi
              ;;
            "windows-latest")
              if ! make build-windows; then
                echo "Normal build failed, trying with SSL bypass..."
                deno compile --allow-net --allow-env --allow-read --allow-write --unsafely-ignore-certificate-errors --target x86_64-pc-windows-msvc --output jenkins-mcp-server-windows-x64.exe src/simple-server.ts
              fi
              if [ "jenkins-mcp-server-windows-x64.exe" != "${{ matrix.artifact }}" ]; then
                mv jenkins-mcp-server-windows-x64.exe ${{ matrix.artifact }}
              fi
              ;;
          esac
        shell: bash

      - name: Generate checksums
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            certutil -hashfile ${{ matrix.artifact }} SHA256 > ${{ matrix.artifact }}.sha256
          else
            shasum -a 256 ${{ matrix.artifact }} > ${{ matrix.artifact }}.sha256
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            ${{ matrix.artifact }}
            ${{ matrix.artifact }}.sha256

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: quality-check
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Deno for binary builds
        uses: denoland/setup-deno@v1
        with:
          deno-version: '2.4.5'

      - name: Build Linux binary for Docker (with SSL handling)
        run: |
          # Try normal build first, fallback to SSL-bypass if needed
          if ! make build-linux; then
            echo "Normal build failed, trying with SSL bypass..."
            deno compile --allow-net --allow-env --allow-read --allow-write --unsafely-ignore-certificate-errors --target x86_64-unknown-linux-gnu --output jenkins-mcp-server-linux-x64 src/simple-server.ts
          fi

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build Docker image using corporate-friendly approach
        run: |
          # Use corporate-friendly Docker build with pre-built binary
          docker build --platform linux/amd64 -f Dockerfile.corporate -t jenkins-mcp-server:latest .
          echo "Corporate Docker build completed successfully"

      - name: Tag and push Docker image
        if: github.event_name != 'pull_request'
        run: |
          # Tag the locally built image with registry tags
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            if [ -n "$tag" ]; then
              echo "Tagging and pushing: $tag"
              docker tag jenkins-mcp-server:latest "$tag"
              docker push "$tag"
            fi
          done

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-binaries, build-docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: '2.4.5'

      - name: Prepare release using Makefile
        run: |
          make install
          make release
          echo "Release preparation completed using 'make release'"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/*/*
          body: |
            ## Jenkins MCP Server ${{ github.ref_name }}
            
            ### Installation Options
            
            #### üê≥ Docker (Recommended)
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ```
            
            #### üì¶ Standalone Binaries
            Download the appropriate binary for your platform:
            - **Linux x64**: `jenkins-mcp-server-linux-x64`
            - **macOS x64**: `jenkins-mcp-server-macos-x64`
            - **macOS ARM64**: `jenkins-mcp-server-macos-arm64`
            - **Windows x64**: `jenkins-mcp-server-windows-x64.exe`
            
            #### ‚úÖ Verification
            All binaries include SHA256 checksums for verification.
            
            ### What's Changed
            See the generated release notes below for detailed changes.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
