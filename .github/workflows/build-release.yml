name: Build and Release

# ‚úÖ PROPER CI/CD: This workflow is triggered ONLY by git tags created on GitHub server
# This ensures all releases are built through automated CI/CD, not local development
# 
# RELEASE PROCESS:
# 1. Create tag on GitHub server: git tag v2.5.0 && git push origin v2.5.0
# 2. GitHub Actions automatically builds cross-platform binaries + Docker images
# 3. Versions are consistent across all artifacts (Docker + binaries)
# 4. No manual version editing in development required

on:
  push:
    tags:
      - 'v*'  # Only triggered by version tags (v2.5.0, v2.5.1, etc.)
  workflow_dispatch:  # Manual trigger for testing

permissions:
  contents: read
  packages: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/jenkins-mcp

jobs:
  # Quality and validation using Makefile
  quality-check:
    name: Quality Assurance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: '2.4.5'

      - name: Install dependencies
        run: make install

      - name: Run comprehensive quality checks
        run: make quality-ci

      - name: Show project information
        run: make info

  build-binaries:
    name: Build Cross-Platform Binaries
    runs-on: ${{ matrix.os }}
    needs: quality-check
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: jenkins-mcp-server-linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: jenkins-mcp-server-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: jenkins-mcp-server-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: jenkins-mcp-server-windows-x64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: '2.4.5'

      - name: Install dependencies
        run: make install

      - name: Extract version from git tag
        id: version
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
            echo "Building version: ${VERSION}"
          else
            echo "VERSION=0.0.0-dev" >> $GITHUB_OUTPUT
            echo "Building development version"
          fi

      - name: Inject version into source code
        shell: bash
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          echo "Injecting version: ${VERSION}"
          # Update version in source code for compiled binary
          sed -i.bak "s/0\.0\.0-dev/${VERSION}/g" src/utils/version.ts
          # Update deno.json version for consistency
          sed -i.bak "s/0\.0\.0-dev/${VERSION}/g" deno.json
          echo "Version injection completed"

      - name: Run quality checks
        run: make quality-ci

      - name: Build binary for target platform
        shell: bash
        run: |
          echo "Building for target: ${{ matrix.target }}"
          deno compile --allow-net --allow-env --allow-read --allow-write --target ${{ matrix.target }} --output ${{ matrix.artifact }} src/simple-server.ts
          echo "Build completed: ${{ matrix.artifact }}"

      - name: Generate checksums
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            certutil -hashfile ${{ matrix.artifact }} SHA256 > ${{ matrix.artifact }}.sha256
          else
            shasum -a 256 ${{ matrix.artifact }} > ${{ matrix.artifact }}.sha256
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            ${{ matrix.artifact }}
            ${{ matrix.artifact }}.sha256

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [quality-check, build-binaries]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from git tag
        id: version
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
            echo "Building Docker image for version: ${VERSION}"
          else
            echo "VERSION=0.0.0-dev" >> $GITHUB_OUTPUT
            echo "Building development Docker image"
          fi

      - name: Inject version into source code for Docker build
        shell: bash
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          echo "Injecting version into Docker build context: ${VERSION}"
          # Update version in source code for Docker build
          sed -i.bak "s/0\.0\.0-dev/${VERSION}/g" src/utils/version.ts
          # Update deno.json version for consistency
          sed -i.bak "s/0\.0\.0-dev/${VERSION}/g" deno.json
          echo "Version injection completed for Docker build"

      - name: Download Linux binary artifact for Docker
        uses: actions/download-artifact@v4
        with:
          name: jenkins-mcp-server-linux-x64
          path: .

      - name: Make binary executable
        run: chmod +x jenkins-mcp-server-linux-x64

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image using corporate-friendly approach
        shell: bash
        run: |
          # Use the version extracted from git tag for Docker build
          VERSION="${{ steps.version.outputs.VERSION }}"
          echo "Building Docker image for version: ${VERSION}"
          
          # Verify version was injected into deno.json
          echo "Checking version injection in deno.json:"
          grep '"version"' deno.json || echo "No version found in deno.json"
          
          # Use CI-compatible Docker build target with version
          make docker-build-ci
          echo "CI Docker build completed successfully"
          
          # Verify the image was built with correct version tag
          if docker images jenkins-mcp-server:${VERSION} | grep -q jenkins-mcp-server; then
            echo "‚úÖ Docker image jenkins-mcp-server:${VERSION} built successfully"
            docker images jenkins-mcp-server:${VERSION}
            
            # Also tag as latest for the registry push
            docker tag jenkins-mcp-server:${VERSION} jenkins-mcp-server:latest
            echo "‚úÖ Tagged as jenkins-mcp-server:latest for registry push"
          else
            echo "‚ùå Docker image jenkins-mcp-server:${VERSION} not found"
            echo "Available jenkins-mcp-server images:"
            docker images | grep jenkins-mcp-server || echo "No jenkins-mcp-server images found"
            echo "All available images:"
            docker images
            echo "Debugging version extraction:"
            echo "Expected version: ${VERSION}"
            echo "deno.json content:"
            cat deno.json
            echo "version.ts content:"
            cat src/utils/version.ts
            exit 1
          fi

      - name: Tag and push Docker image
        if: github.event_name != 'pull_request'
        run: |
          # Tag the locally built image with registry tags
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            if [ -n "$tag" ]; then
              echo "Tagging and pushing: $tag"
              docker tag jenkins-mcp-server:latest "$tag"
              if ! docker push "$tag"; then
                echo "Failed to push $tag, retrying once..."
                sleep 5
                docker push "$tag" || echo "Failed to push $tag after retry"
              fi
            fi
          done

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-binaries, build-docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: '2.2.10'

      - name: Prepare release using Makefile
        run: |
          make install
          make release
          echo "Release preparation completed using 'make release'"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/*/*
          body: |
            ## Jenkins MCP Server ${{ github.ref_name }}
            
            ### Installation Options
            
            #### üê≥ Docker (Recommended)
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ```
            
            #### üì¶ Standalone Binaries
            Download the appropriate binary for your platform:
            - **Linux x64**: `jenkins-mcp-server-linux-x64`
            - **macOS x64**: `jenkins-mcp-server-macos-x64`
            - **macOS ARM64**: `jenkins-mcp-server-macos-arm64`
            - **Windows x64**: `jenkins-mcp-server-windows-x64.exe`
            
            #### ‚úÖ Verification
            All binaries include SHA256 checksums for verification.
            
            ### What's Changed
            See the generated release notes below for detailed changes.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
